Q: When would you want to use a remote repository rather than keeping all your work local?
A: One situation is when you are ready to share your work and colaborate with others. Another situation could be that you
want to continue work on another computer (e.g office to home).

Q: Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your
remote repository?
A: Pulling changes manually allows the user to finished their current task without being interupted by possible merge conflicts multiple times. Once the developer is finished with their task, they can then pull the remote changes and solve any potential conflicts at that time.

Q: Describe the differences between forks, clones, and branches. When would you use one instead of another?
A: 
- Fork: Copies a repository to your GitHub.
- Clone: Copies a remote repository to your local machine.
- Branch: A branch copies a project on the same repository so that additional/experimental changes can be made to the project without affecting the main (master) program. The branch can then be merged to the main (master) branch at a later time.

Q: What is the benefit of having a copy of the last known state of the remote stored locally?
A: One benefit would be if you plan working on the project while offline. For example, taking a flight on an airplane.

Q: How would you collaborate without Git or GitHub? What would be easier, and what would be harder?
A: Collaborating without Git would be difficult, however there are alternatives such as Subversion, CVS, Microsoft Team Foundation Server, Helix etc. Most alternatives to Git would require a local server at the studio/office and would make it difficult to collaborate outside of the office. Merging other peoples work would also be much more challenging without Git. I am having a hard time coming up with an easier solution to collaborate without Git.

Q: When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
A: A seperate branch could be useful whenever a developer would like to keep the master branch clean. For example, if the user would like to make experiemental features to the code, it might be a good idea to break off into another branch. Developers can later discuss the changes/additions and decide whether or not to merge the branch with the master.
